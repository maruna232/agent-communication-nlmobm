name: Backend CI

on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/backend/**'

jobs:
  lint:
    description: Runs ESLint and type checking on the backend TypeScript codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      
      - name: Run ESLint
        working-directory: src/backend
        run: npm run lint
      
      - name: Check TypeScript types
        working-directory: src/backend
        run: tsc --noEmit

  test:
    description: Runs unit and integration tests with Jest and ensures code coverage meets requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      
      - name: Run tests with coverage
        working-directory: src/backend
        run: npm run test:coverage
        env:
          NODE_ENV: 'test'
          REDIS_HOST: 'localhost'
          REDIS_PORT: '6379'
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: src/backend/coverage
          retention-days: 14

  security-scan:
    description: Scans dependencies for vulnerabilities and performs security checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      
      - name: Run npm audit
        working-directory: src/backend
        run: npm audit --production --audit-level=high
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        with:
          args: '--severity-threshold=high --all-projects'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    description: Builds the TypeScript application and Docker container
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      
      - name: Build TypeScript application
        working-directory: src/backend
        run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          push: false
          tags: ai-agent-network-backend:${{ github.sha }}
          load: true
          cache-from: type=gha,scope=backend-docker
          cache-to: type=gha,scope=backend-docker,mode=max
      
      - name: Save Docker image
        run: docker save ai-agent-network-backend:${{ github.sha }} > backend-image.tar
      
      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: backend-docker-image
          path: backend-image.tar
          retention-days: 1

  docker-scan:
    description: Scans the Docker image for vulnerabilities
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: backend-docker-image
          path: .
      
      - name: Load Docker image
        run: docker load < backend-image.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-agent-network-backend:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          exit-code: '1'
          ignore-unfixed: true
      
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif
          retention-days: 30

  api-tests:
    description: Runs API integration tests against the containerized application
    runs-on: ubuntu-latest
    needs: [build]
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: backend-docker-image
          path: .
      
      - name: Load Docker image
        run: docker load < backend-image.tar
      
      - name: Run Docker container
        run: docker run -d --name websocket-server -p 3001:3001 -e NODE_ENV=test -e REDIS_HOST=host.docker.internal -e REDIS_PORT=6379 ai-agent-network-backend:${{ github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/backend
        run: npm ci
      
      - name: Wait for server to start
        run: sleep 10
      
      - name: Run API tests
        working-directory: src/backend
        run: npm run test:api
        env:
          API_URL: 'http://localhost:3001'

  notify:
    description: Sends notifications about the build status
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan, docker-scan, api-tests]
    if: always()
    steps:
      - name: Check build status
        id: check
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
      
      - name: Send Slack notification on failure
        uses: slackapi/slack-github-action@v1.23.0
        if: "needs.lint.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success' || needs.security-scan.result != 'success' || needs.docker-scan.result != 'success' || needs.api-tests.result != 'success'"
        with:
          payload: '{"text":"❌ Backend CI pipeline failed! See details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Send Slack notification on success
        uses: slackapi/slack-github-action@v1.23.0
        if: "github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security-scan.result == 'success' && needs.docker-scan.result == 'success' && needs.api-tests.result == 'success'"
        with:
          payload: '{"text":"✅ Backend CI pipeline succeeded! Ready for deployment: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}